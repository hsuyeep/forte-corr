/* Header file for memory management operations over shared memory.
 * pep/21Aug12
 */
#ifndef __MEMMGMT_H__
#define __MEMMGMT_H__

// NOTE: Using POSIX shared memory API, not the deprecated shmget ();
#include <sys/mman.h>
#include <sys/stat.h>
#include <semaphore.h>
#include <fcntl.h>
#include "../include/datalayout.h"

/* ISSUES:
 *   - How does one get the latest STA? If reader is lagging, then can there be 
 *     multiple regions with new data? If so, how to get the latest one?
 *   - Should the signal generated by fill_region () also contain the region
 *     number of the last filled region?
 *   - Error throwing mechanism? Currently am just returning from crucial 
 *     functions like create_partition() without cleanup...
 *   - Reader handling multiple full regions, to avoid read starvation of 
 *     certain regions.
 */

extern int MemDone;
enum {Partitions=3};        // One for every attached process, which runs on a 
                            // single processor/core.

/* Structure defining a single region of memory which is passed as a unit to 
 * an FX process. A region contains raw data for several STA cycles, as 
 * contiguous data, with the headers stripped and available in a separate array.
 *   An STA of data is the basic unit of operation of the FX process, and all
 * data within an STA cycle is required to be available. 
 * (TODO: Is this a good constraint?)
 */
enum {Empty, Writing, Full, Reading, StatusTypes};
static char RegionStatus [StatusTypes][8] = 
 {[Empty] = "Empty", [Writing] = "Writing", 
  [Full]  = "Full",  [Reading] = "Reading"};
enum {Block, NonBlock};

typedef struct
{ int validsta;            // Number of good STA making up this region.
  int lock;                // Region lock.
  int status;              // Latest data??
} RawRegionType;

// NOTE: Cannot share pointers initialized to be valid in a processes' memory 
// map with another process! RawRegionPtrType must be local to a process.
typedef struct
{ unsigned char *data;     // Actual memory of region.
  // metainfo. of all frames in region (50*97*2*20*32B=6208000 Bytes.
  FrameHdrType *framemeta; // [STA2Region*Sets2STA*Frames2Set]; 
} RawRegionPtrType;

// Registry is to be shared between processes.
typedef struct
{ int avail_reg;          // The offset of the latest region available for rd.
  int size;               // Size of the registry.
  sem_t sem;              // Semaphore for access control to the registry.
  RawRegionType region[0];// The list of regions making up this partition.
} PartRegistryType;

typedef struct
{ int fd;
  int regions;            // Total number of regions in this partition.
  PartRegistryType *registry;// Registry of information of all regions.
  unsigned long size;     // Partition size.
  char path[16];          // Path to POSIX shared memory object.
  unsigned char *ptr;     // mmapped pointer to whole partition.
  RawRegionType *curr_reg;// Currently active region.
  RawRegionPtrType regptr[Regions2Part];
} ShmType;


// Function prototypes
void mem_sig_hdlr (int dummy);
int create_partition (ShmType *);
int destroy_partition (ShmType *);

int registry_print (ShmType *, FILE *);
int registry_change_region_status (PartRegistryType *, int , int );

int region_fill_STA_file (RawRegionPtrType *, int , FILE *);
extern struct StLinkInfoType;
int region_fill_STA_net (RawRegionPtrType *, int , struct StLinkInfoType *, 
                         struct StLinkInfoType *, unsigned char *);
extern int recv_link_pair (struct StLinkInfoType *, struct StLinkInfoType *, 
                            unsigned char *);
int region_print_frame_meta (RawRegionPtrType *, FILE *);
int region_write_to_file (RawRegionPtrType *, FILE *);
int find_wr_region (ShmType *, int);
int find_rd_region (ShmType *, int);

#endif // __MEMMGMT_H__
